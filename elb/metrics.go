package elb

import (
        b "github.com/CoverGenius/cloudwatch-prometheus-exporter/base"
	"github.com/aws/aws-sdk-go/aws"
)

var metrics = map[string]*b.MetricDescription{
	"BackendConnectionErrors": {
		Help:       aws.String("The number of connections that were not successfully established between the load balancer and the registered instances. Because the load balancer retries the connection when there are errors, this count can exceed the request rate. Note that this count also includes any connection errors related to health checks"),
		Type:       aws.String("counter"),
		OutputName: aws.String("clb_backend_connection_errors"),
		Data:       map[string][]*string{},
	},
	"EstimatedALBActiveConnectionCount": {
		Help:       aws.String("The estimated number of concurrent TCP connections active from clients to the load balancer and from the load balancer to targets"),
		Type:       aws.String("counter"),
		OutputName: aws.String("clb_estimated_alb_active_connection_count"),
		Data:       map[string][]*string{},
	},
	"EstimatedALBConsumedLCUs": {
		Help:       aws.String("The estimated number of load balancer capacity units (LCU) used by an Application Load Balancer"),
		Type:       aws.String("counter"),
		OutputName: aws.String("clb_estimated_alb_consumed_lcus"),
		Data:       map[string][]*string{},
	},
	"EstimatedALBNewConnectionCount": {
		Help:       aws.String("The estimated number of new TCP connections established from clients to the load balancer and from the load balancer to targets"),
		Type:       aws.String("counter"),
		OutputName: aws.String("clb_estimated_alb_new_connection_count"),
		Data:       map[string][]*string{},
	},
	"EstimatedProcessedBytes": {
		Help:       aws.String("The estimated number of bytes processed by an Application Load Balancer"),
		Type:       aws.String("counter"),
		OutputName: aws.String("clb_estimated_processed_bytes"),
		Data:       map[string][]*string{},
	},
	"HealthyHostCount": {
		Help:       aws.String("The number of healthy instances registered with your load balancer. A newly registered instance is considered healthy after it passes the first health check"),
		Type:       aws.String("counter"),
		OutputName: aws.String("clb_healthy_host_count"),
		Data:       map[string][]*string{},
	},
	"HTTPCode_Backend_2XX": {
		Help:       aws.String("The number of HTTP response codes generated by registered instances. This count does not include any response codes generated by the load balancer"),
		Type:       aws.String("counter"),
		OutputName: aws.String("clb_httpcode_backend_2xx"),
		Data:       map[string][]*string{},
	},
	"HTTPCode_Backend_3XX": {
		Help:       aws.String("The number of HTTP response codes generated by registered instances. This count does not include any response codes generated by the load balancer"),
		Type:       aws.String("counter"),
		OutputName: aws.String("clb_httpcode_backend_3xx"),
		Data:       map[string][]*string{},
	},
	"HTTPCode_Backend_4XX": {
		Help:       aws.String("The number of HTTP response codes generated by registered instances. This count does not include any response codes generated by the load balancer"),
		Type:       aws.String("counter"),
		OutputName: aws.String("clb_httpcode_backend_4xx"),
		Data:       map[string][]*string{},
	},
	"HTTPCode_Backend_5XX": {
		Help:       aws.String("The number of HTTP response codes generated by registered instances. This count does not include any response codes generated by the load balancer"),
		Type:       aws.String("counter"),
		OutputName: aws.String("clb_httpcode_backend_5xx"),
		Data:       map[string][]*string{},
	},
	"HTTPCode_ELB_5XX": {
		Help:       aws.String("The number of HTTP 5XX server error codes generated by the load balancer. This count does not include any response codes generated by the registered instances. The metric is reported if there are no healthy instances registered to the load balancer, or if the request rate exceeds the capacity of the instances (spillover) or the load balancer"),
		Type:       aws.String("counter"),
		OutputName: aws.String("clb_httpcode_elb_5xx"),
		Data:       map[string][]*string{},
	},
	"Latency": {
		Help:       aws.String("[HTTP listener] The total time elapsed, in seconds, from the time the load balancer sent the request to a registered instance until the instance started to send the response headers.[TCP listener] The total time elapsed, in seconds, for the load balancer to successfully establish a connection to a registered instance"),
		Type:       aws.String("counter"),
		OutputName: aws.String("clb_latency"),
		Data:       map[string][]*string{},
	},
	"RequestCount": {
		Help:       aws.String("The number of requests completed or connections made during the specified interval (1 or 5 minutes)"),
		Type:       aws.String("counter"),
		OutputName: aws.String("clb_request_count"),
		Data:       map[string][]*string{},
	},
	"SurgeQueueLength": {
		Help:       aws.String("The total number of requests (HTTP listener) or connections (TCP listener) that are pending routing to a healthy instance. The maximum size of the queue is 1,024. Additional requests or connections are rejected when the queue is full"),
		Type:       aws.String("counter"),
		OutputName: aws.String("clb_surge_queue_length"),
		Data:       map[string][]*string{},
	},
	"UnHealthyHostCount": {
		Help:       aws.String("The number of unhealthy instances registered with your load balancer"),
		Type:       aws.String("counter"),
		OutputName: aws.String("clb_unhealthy_host_count"),
		Data:       map[string][]*string{},
	},
}

func GetMetrics() map[string]*b.MetricDescription {
	return metrics
}
