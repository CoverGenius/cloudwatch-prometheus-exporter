package elbv2

import (
	b "github.com/CoverGenius/cloudwatch-prometheus-exporter/base"
	h "github.com/CoverGenius/cloudwatch-prometheus-exporter/helpers"
	"github.com/aws/aws-sdk-go/service/cloudwatch"
)

// ALBMetrics is a map of default MetricDescriptions for this namespace
var ALBMetrics = map[string]*b.ConfigMetric{
	"ActiveConnectionCount": {
		Help:          ("The total number of concurrent TCP connections active from clients to the load balancer and from the load balancer to targets"),
		OutputName:    ("alb_alive_connection_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"ClientTLSNegotiationErrorCount": {
		Help:          ("The number of TLS connections initiated by the client that did not establish a session with the load balancer. Possible causes include a mismatch of ciphers or protocols"),
		OutputName:    ("alb_client_tls_negotiation_error_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"ConsumedLCUs": {
		Help:          ("The number of load balancer capacity units (LCU) used by your load balancer"),
		OutputName:    ("alb_consumed_lcus"),
		Statistics:    h.StringPointers("Average"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"HealthyHostCount": {
		Help:          ("The number of targets that are considered healthy"),
		OutputName:    ("alb_healthy_host_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"HTTPCode_ELB_4XX_Count": {
		Help:          ("The number of HTTP 4XX client error codes that originate from the load balancer. Client errors are generated when requests are malformed or incomplete"),
		OutputName:    ("alb_httpcode_elb_4xx_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"HTTPCode_ELB_502_Count": {
		Help:          ("The number of HTTP 502 error codes that originate from the load balancer"),
		OutputName:    ("alb_httpcode_elb_502_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"HTTPCode_ELB_503_Count": {
		Help:          ("The number of HTTP 503 error codes that originate from the load balancer"),
		OutputName:    ("alb_httpcode_elb_503_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"HTTPCode_ELB_504_Count": {
		Help:          ("The number of HTTP 504 error codes that originate from the load balancer"),
		OutputName:    ("alb_httpcode_elb_504_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"HTTPCode_ELB_5XX_Count": {
		Help:          ("The number of HTTP 5XX server error codes that originate from the load balancer. This count does not include any response codes generated by the targets"),
		OutputName:    ("alb_httpcode_elb_5xx_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"HTTPCode_Target_2XX_Count": {
		Help:          ("The number of HTTP response codes generated by the targets"),
		OutputName:    ("alb_httpcode_target_2xx_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"HTTPCode_Target_3XX_Count": {
		Help:          ("The number of HTTP response codes generated by the targets"),
		OutputName:    ("alb_httpcode_target_3xx_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"HTTPCode_Target_4XX_Count": {
		Help:          ("The number of HTTP response codes generated by the targets"),
		OutputName:    ("alb_httpcode_target_4xx_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"HTTPCode_Target_5XX_Count": {
		Help:          ("The number of HTTP response codes generated by the targets"),
		OutputName:    ("alb_httpcode_target_5xx_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"NewConnectionCount": {
		Help:          ("The total number of new TCP connections established from clients to the load balancer and from the load balancer to targets"),
		OutputName:    ("alb_new_connection_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"ProcessedBytes": {
		Help:          ("The total number of bytes processed by the load balancer over IPv4 and IPv6. This count includes traffic to and from clients and Lambda functions, and traffic from an Identity Provider (IdP) if user authentication is enabled"),
		OutputName:    ("alb_processed_bytes"),
		Statistics:    h.StringPointers("Average"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"RequestCount": {
		Help:          ("The number of requests processed over IPv4 and IPv6. This count includes only the requests with a response generated by a target of the load balancer"),
		OutputName:    ("alb_request_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"RequestCountPerTarget": {
		Help:          ("The average number of requests received by each target in a target group. You must specify the target group using the TargetGroup dimension. This metric does not apply if the target is a Lambda function"),
		OutputName:    ("alb_request_count_per_target"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"RuleEvaluations": {
		Help:          ("The number of rules processed by the load balancer given a request rate averaged over an hour"),
		OutputName:    ("alb_rule_evaluations"),
		Statistics:    h.StringPointers("Average"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"TargetConnectionErrorCount": {
		Help:          ("The number of connections that were not successfully established between the load balancer and target. This metric does not apply if the target is a Lambda function"),
		OutputName:    ("alb_target_connection_error_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"TargetResponseTime": {
		Help:          ("The time elapsed, in seconds, after the request leaves the load balancer until a response from the target is received. This is equivalent to the target_processing_time field in the access logs"),
		OutputName:    ("alb_target_response_time"),
		Statistics:    h.StringPointers("Average", "Maximum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"UnHealthyHostCount": {
		Help:          ("The number of targets that are considered unhealthy"),
		OutputName:    ("alb_unhealthy_host_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
}

// NLBMetrics is a map of default MetricDescriptions for this namespace
var NLBMetrics = map[string]*b.ConfigMetric{
	"ActiveFlowCount": {
		Help:          ("The total number of concurrent flows (or connections) from clients to targets. This metric includes connections in the SYN_SENT and ESTABLISHED states. TCP connections are not terminated at the load balancer, so a client opening a TCP connection to a target counts as a single flow"),
		OutputName:    ("nlb_active_flow_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"ConsumedLCUs": {
		Help:          ("The number of load balancer capacity units (LCU) used by your load balancer"),
		OutputName:    ("nlb_consumed_lcus"),
		Statistics:    h.StringPointers("Average"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"HealthyHostCount": {
		Help:          ("The number of targets that are considered healthy"),
		OutputName:    ("nlb_healthy_host_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"NewFlowCount": {
		Help:          ("The total number of new flows (or connections) established from clients to targets in the time period"),
		OutputName:    ("nlb_new_flow_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"ProcessedBytes": {
		Help:          ("The total number of bytes processed by the load balancer, including TCP/IP headers. This count includes traffic to and from targets, minus health check traffic"),
		OutputName:    ("nlb_processed_bytes"),
		Statistics:    h.StringPointers("Average"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"TCP_Client_Reset_Count": {
		Help:          ("The total number of reset (RST) packets sent from a client to a target. These resets are generated by the client and forwarded by the load balancer"),
		OutputName:    ("nlb_tcp_client_reset_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"TCP_ELB_Reset_Count": {
		Help:          ("The total number of reset (RST) packets generated by the load balancer"),
		OutputName:    ("nlb_tcp_elb_reset_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"TCP_Target_Reset_Count": {
		Help:          ("The total number of reset (RST) packets sent from a target to a client. These resets are generated by the target and forwarded by the load balancer"),
		OutputName:    ("nlb_tcp_target_reset_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
	"UnHealthyHostCount": {
		Help:          ("The number of targets that are considered unhealthy"),
		OutputName:    ("nlb_unhealthy_host_count"),
		Statistics:    h.StringPointers("Average", "Sum"),
		PeriodSeconds: 300,
		Dimensions:    []*cloudwatch.Dimension{},
	},
}
